# =====================================
# connectiontest.yml – Pre-deployment validatie
# =====================================
name: Connection Test & Pre-deployment Validation
on:
  push:
    branches: [ Gameserver ]
  workflow_dispatch:

jobs:
  connection-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      HOST: ${{ secrets.GAMESERVER_HOST }}
      USER: ${{ secrets.GAMESERVER_USER }}
    outputs:
      validation-passed: ${{ steps.validation-summary.outputs.passed }}
    steps:
      - uses: actions/checkout@v4

      - name: Start SSH-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GAMESERVER_SSH_KEY }}

      - name: Voeg host-key toe
        run: ssh-keyscan -t ed25519 -H "$HOST" >> ~/.ssh/known_hosts

      - name: Test basis SSH connectiviteit
        run: |
          echo "=== SSH Connectivity Test ==="
          ssh -o BatchMode=yes -o ConnectTimeout=10 "$USER@$HOST" \
            'echo "✓ Verbonden met $(hostname -f) als $(whoami)" && echo "✓ Server uptime: $(uptime -p)"'

      - name: Controleer server dependencies
        id: dependency-check
        run: |
          ssh "$USER@$HOST" <<'EOS'
          set -e
          echo "=== Dependency Validation ==="
          MISSING=0
          
          echo "Controleren van tmux..."
          if ! command -v tmux >/dev/null; then
            echo "✗ tmux ontbreekt. Installeer eerst handmatig (of run ./start.sh)."
            MISSING=1
          else
            echo "✓ tmux is beschikbaar ($(tmux -V))"
          fi
          
          echo "Controleren van Java..."
          if ! java -version 2>&1 | grep -q "\(24\|17\)"; then
            echo "✗ Java 17/24 ontbreekt. Installeer eerst handmatig (of run ./start.sh)."
            MISSING=1
          else
            JAVA_VERSION=$(java -version 2>&1 | head -n1)
            echo "✓ Java is beschikbaar: $JAVA_VERSION"
          fi
          
          echo "Controleren van rsync..."
          if ! command -v rsync >/dev/null; then
            echo "✗ rsync ontbreekt (vereist voor file sync)."
            MISSING=1
          else
            echo "✓ rsync is beschikbaar ($(rsync --version | head -n1))"
          fi
          
          if [ "$MISSING" -eq 0 ]; then
            echo "✓ Alle dependencies zijn beschikbaar"
          else
            echo "✗ Dependencies ontbreken, deployment kan niet doorgaan"
          fi
          
          [ "$MISSING" -eq 0 ] || exit 1
          EOS

      - name: Controleer server directory structuur
        run: |
          ssh "$USER@$HOST" <<'EOS'
          set -e
          echo "=== Directory Structure Check ==="
          
          # Check if minecraft directory exists
          if [ ! -d "/srv/minecraft" ]; then
            echo "✗ /srv/minecraft directory ontbreekt"
            echo "Aanmaken van /srv/minecraft directory..."
            sudo mkdir -p /srv/minecraft
            sudo chown $USER:$USER /srv/minecraft
            echo "✓ /srv/minecraft directory aangemaakt"
          else
            echo "✓ /srv/minecraft directory bestaat"
          fi
          
          # Check if server-data directory exists
          if [ ! -d "/srv/minecraft/server-data" ]; then
            echo "⚠ /srv/minecraft/server-data ontbreekt (wordt aangemaakt bij deployment)"
            mkdir -p /srv/minecraft/server-data
          else
            echo "✓ /srv/minecraft/server-data directory bestaat"
          fi
          
          # Check if backups directory exists
          if [ ! -d "/srv/minecraft/backups" ]; then
            echo "⚠ /srv/minecraft/backups ontbreekt (wordt aangemaakt bij deployment)"
            mkdir -p /srv/minecraft/backups
          else
            echo "✓ /srv/minecraft/backups directory bestaat"
          fi
          
          # Check permissions
          if [ -w "/srv/minecraft" ]; then
            echo "✓ Write permissions op /srv/minecraft"
          else
            echo "✗ Geen write permissions op /srv/minecraft"
            exit 1
          fi
          EOS

      - name: Test tmux functionaliteit
        run: |
          ssh "$USER@$HOST" <<'EOS'
          set -e
          echo "=== Tmux Functionality Test ==="
          
          # Create a test session with a longer running command
          TEST_SESSION="hemme-test-$(date +%s)"
          echo "Aanmaken van test tmux sessie: $TEST_SESSION"
          
          # Start test session with a command that runs longer
          tmux new-session -d -s "$TEST_SESSION" 'echo "Test session gestart op $(date)"; sleep 5; echo "Test voltooid op $(date)"'
          
          # Verify session exists
          if tmux has-session -t "$TEST_SESSION" 2>/dev/null; then
            echo "✓ Tmux sessie succesvol aangemaakt"
          else
            echo "✗ Tmux sessie aanmaken gefaald"
            exit 1
          fi
          
          # Wait a moment and check if session is still active
          sleep 2
          if tmux has-session -t "$TEST_SESSION" 2>/dev/null; then
            echo "✓ Tmux sessie blijft actief"
            
            # Try to capture output (but don't fail if it doesn't work)
            if OUTPUT=$(tmux capture-pane -t "$TEST_SESSION" -p 2>/dev/null); then
              echo "✓ Tmux pane capture succesvol"
              echo "   Output bevat: $(echo "$OUTPUT" | head -1)"
            else
              echo "⚠ Tmux pane capture gefaald, maar sessie werkt wel"
            fi
          else
            echo "⚠ Tmux sessie eindigde vroeg, maar dit kan normaal zijn"
          fi
          
          # Clean up test session (ignore errors if already ended)
          tmux kill-session -t "$TEST_SESSION" 2>/dev/null || true
          echo "✓ Test tmux sessie cleanup voltooid"
          
          # Test basic tmux commands
          echo "Testen van tmux commands..."
          # tmux list-sessions returns exit code 1 when no sessions exist, which is normal
          tmux list-sessions 2>/dev/null || echo "Geen actieve tmux sessies (dit is normaal)"
          echo "✓ tmux command interface werkt"
          
          # Check if existing minecraft session is running and analyze it
          if tmux has-session -t hemme-mc 2>/dev/null; then
            echo "ℹ Bestaande minecraft server sessie 'hemme-mc' gevonden"
            SESSION_INFO=$(tmux list-sessions | grep hemme-mc || echo 'Sessie details niet beschikbaar')
            echo "   Status: $SESSION_INFO"
            
            # Check if the session contains a crashed server
            echo "   Controleren van sessie gezondheid..."
            SESSION_CONTENT=$(tmux capture-pane -t hemme-mc -p 2>/dev/null || echo "")
            if [[ -n "$SESSION_CONTENT" ]]; then
              if echo "$SESSION_CONTENT" | grep -q "\[exited\]"; then
                echo "   ⚠ Waarschuwing: Bestaande sessie is gecrashed"
                echo "   Laatste output van gecrashte sessie:"
                echo "$SESSION_CONTENT" | tail -10 | sed 's/^/     /'
                echo "   Opruimen van gecrashte sessie..."
                tmux kill-session -t hemme-mc 2>/dev/null || true
                echo "   ✓ Gecrashte sessie opgeruimd"
              else
                echo "   ✓ Bestaande sessie lijkt gezond"
                echo "   Recente output:"
                echo "$SESSION_CONTENT" | tail -5 | sed 's/^/     /'
              fi
            else
              echo "   ⚠ Kan sessie inhoud niet lezen"
            fi
          else
            echo "ℹ Geen bestaande minecraft server sessie gevonden"
          fi
          
          # Test tmux mouse support configuration
          echo "Controleren van tmux configuratie..."
          if [[ -f "$HOME/.tmux.conf" ]]; then
            if grep -q "set -g mouse on" "$HOME/.tmux.conf" 2>/dev/null; then
              echo "✓ Tmux mouse support geconfigureerd"
            else
              echo "ℹ Tmux mouse support niet geconfigureerd (wordt toegevoegd bij deployment)"
            fi
          else
            echo "ℹ Geen .tmux.conf gevonden (wordt aangemaakt bij deployment)"
          fi
          EOS

      - name: Controleer repository bestanden
        run: |
          echo "=== Repository File Validation ==="
          
          # Check if server-data directory exists in repo
          if [ ! -d "./server-data" ]; then
            echo "✗ server-data/ directory ontbreekt in repository"
            echo "   Zet je Minecraft server bestanden in de server-data/ map en commit opnieuw."
            exit 1
          else
            echo "✓ server-data/ directory gevonden in repository"
          fi
          
          # Check if start.sh exists
          if [ ! -f "./start.sh" ]; then
            echo "✗ start.sh script ontbreekt in repository"
            exit 1
          else
            echo "✓ start.sh script gevonden"
          fi
          
          # List important files in server-data
          echo "Server bestanden in repository:"
          find ./server-data -maxdepth 2 -type f | head -10 | while read file; do
            echo "  - $file"
          done

      - name: Test disk ruimte
        run: |
          ssh "$USER@$HOST" <<'EOS'
          set -e
          echo "=== Disk Space Check ==="
          
          # Check available disk space
          DISK_USAGE=$(df -h /srv/minecraft | tail -1)
          echo "Disk usage voor /srv/minecraft:"
          echo "$DISK_USAGE"
          
          # Extract percentage and check if < 90%
          USAGE_PERCENT=$(echo "$DISK_USAGE" | awk '{print $5}' | sed 's/%//')
          if [ "$USAGE_PERCENT" -gt 90 ]; then
            echo "✗ Disk space kritiek laag: ${USAGE_PERCENT}% gebruikt"
            echo "  Ruim eerst wat ruimte op voordat je deployment uitvoert"
            exit 1
          else
            echo "✓ Voldoende disk space beschikbaar: ${USAGE_PERCENT}% gebruikt"
          fi
          
          # Check if we have at least 1GB free for backup
          AVAILABLE_GB=$(df -BG /srv/minecraft | tail -1 | awk '{print $4}' | sed 's/G//')
          if [ "$AVAILABLE_GB" -lt 1 ]; then
            echo "⚠ Minder dan 1GB beschikbaar, backup kan falen"
          else
            echo "✓ Voldoende ruimte voor backup (${AVAILABLE_GB}GB beschikbaar)"
          fi
          EOS

      - name: Test network connectiviteit vanuit server
        run: |
          ssh "$USER@$HOST" <<'EOS'
          echo "=== Network Connectivity Test ==="
          
          # Test if server can reach important minecraft resources
          echo "Testen van externe connectiviteit..."
          
          # Test Minecraft authentication servers
          if curl -s --connect-timeout 5 "https://sessionserver.mojang.com/session/minecraft/hasJoined?username=test&serverId=test" >/dev/null; then
            echo "✓ Mojang authentication servers bereikbaar"
          else
            echo "⚠ Mojang authentication servers mogelijk niet bereikbaar"
          fi
          
          # Test general internet connectivity
          if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
            echo "✓ Internet connectiviteit beschikbaar"
          else
            echo "⚠ Internet connectiviteit mogelijk beperkt"
          fi
          EOS

      - name: Test Java en start.sh functionaliteit
        run: |
          ssh "$USER@$HOST" <<'EOS'
          echo "=== Java & Start Script Test ==="
          
          # Test Java startup specifically for Minecraft
          echo "Testen van Java configuratie voor Minecraft..."
          
          # Check if SDKMAN is available
          if [[ -f "$HOME/.sdkman/bin/sdkman-init.sh" ]]; then
            echo "✓ SDKMAN gevonden"
            set +u
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            
            # Check if the specific Java version from start.sh is available
            if [[ -d "$HOME/.sdkman/candidates/java/21.0.1-tem" ]]; then
              echo "✓ Java 21.0.1-tem beschikbaar via SDKMAN"
              sdk use java 21.0.1-tem
              echo "Java versie na SDKMAN configuratie:"
              java -version 2>&1 | head -3 | sed 's/^/  /'
            else
              echo "⚠ Java 21.0.1-tem niet gevonden, start.sh zal deze installeren"
            fi
            set -u
          else
            echo "ℹ SDKMAN niet gevonden, start.sh zal deze installeren"
          fi
          
          # Test if start.sh exists and is executable
          if [[ -f "/srv/minecraft/start.sh" ]]; then
            echo "✓ start.sh script gevonden"
            if [[ -x "/srv/minecraft/start.sh" ]]; then
              echo "✓ start.sh is executable"
            else
              echo "⚠ start.sh niet executable, wordt gecorrigeerd..."
              chmod +x "/srv/minecraft/start.sh"
              echo "✓ start.sh executable gemaakt"
            fi
            
            # Validate start.sh syntax
            echo "Controleren van start.sh syntax..."
            if bash -n "/srv/minecraft/start.sh"; then
              echo "✓ start.sh syntax is correct"
            else
              echo "✗ start.sh syntax errors gevonden"
              exit 1
            fi
            
            # Check if start.sh can find its dependencies
            echo "Controleren van start.sh dependencies..."
            cd /srv/minecraft
            
            # Test if the script can at least start (but we'll exit before actual server start)
            # We'll create a modified version that exits early for testing
            echo "Simuleren van start.sh initialisatie..."
            
            # Check if server-data directory setup works
            if [[ -d "server-data" ]]; then
              echo "✓ server-data directory bestaat"
              
              # Check permissions
              if [[ -w "server-data" ]]; then
                echo "✓ server-data is schrijfbaar"
              else
                echo "⚠ server-data niet schrijfbaar"
              fi
              
              # Check for existing JAR
              if [[ -f "server-data/hemme-mc.jar" ]]; then
                echo "✓ Minecraft server JAR gevonden"
                
                # Quick JAR validity check
                if unzip -t "server-data/hemme-mc.jar" >/dev/null 2>&1; then
                  echo "✓ Minecraft server JAR lijkt geldig"
                else
                  echo "⚠ Minecraft server JAR mogelijk corrupt"
                fi
              else
                echo "ℹ Minecraft server JAR niet gevonden, wordt gedownload bij deployment"
              fi
              
              # Check EULA
              if [[ -f "server-data/eula.txt" ]] && grep -q "eula=true" "server-data/eula.txt" 2>/dev/null; then
                echo "✓ EULA geaccepteerd"
              else
                echo "ℹ EULA nog niet geaccepteerd, wordt automatisch gedaan"
              fi
              
            else
              echo "ℹ server-data directory wordt aangemaakt bij deployment"
            fi
            
          else
            echo "✗ start.sh script niet gevonden op verwachte locatie"
            echo "Controleren van /srv/minecraft contents:"
            ls -la /srv/minecraft/ | sed 's/^/  /'
            exit 1
          fi
          
          # Test memory allocation capabilities
          echo "Controleren van geheugen voor 10GB allocatie..."
          TOTAL_MEM_KB=$(grep MemTotal /proc/meminfo | awk '{print $2}')
          TOTAL_MEM_GB=$((TOTAL_MEM_KB / 1024 / 1024))
          
          if [[ $TOTAL_MEM_GB -ge 12 ]]; then
            echo "✓ Voldoende geheugen beschikbaar: ${TOTAL_MEM_GB}GB"
          elif [[ $TOTAL_MEM_GB -ge 10 ]]; then
            echo "⚠ Minimaal geheugen beschikbaar: ${TOTAL_MEM_GB}GB (kan krap zijn)"
          else
            echo "✗ Onvoldoende geheugen: ${TOTAL_MEM_GB}GB (minimum 10GB vereist)"
            exit 1
          fi
          
          echo "✓ Java en start.sh validatie voltooid"
          EOS

      - name: Validatie samenvatting
        id: validation-summary
        run: |
          echo "=== Validatie Samenvatting ==="
          echo "✓ SSH connectiviteit succesvol"
          echo "✓ Alle dependencies beschikbaar"
          echo "✓ Server directory structuur correct"
          echo "✓ Tmux functionaliteit getest en gezond"
          echo "✓ Repository bestanden gevalideerd"
          echo "✓ Disk space voldoende"
          echo "✓ Network connectiviteit getest"
          echo "✓ Java en start.sh configuratie gevalideerd"
          echo ""
          echo "🎉 Alle pre-deployment checks succesvol!"
          echo "Server is klaar voor deployment."
          echo ""
          echo "Deployment aanbevelingen:"
          echo "- Server zal automatisch herstarten met graceful shutdown"
          echo "- Spelers krijgen 30 seconden waarschuwing"
          echo "- Backup wordt automatisch aangemaakt"
          echo "- Uitgebreide diagnostiek bij eventuele problemen"
          echo ""
          echo "passed=true" >> $GITHUB_OUTPUT

  trigger-deployment:
    needs: connection-test
    if: needs.connection-test.outputs.validation-passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger deployment workflow
        run: |
          echo "=== Triggering Deployment ==="
          echo "Connection test succesvol, deployment wordt gestart..."
          echo ""
          echo "Deployment workflow wordt automatisch gestart door GitHub Actions."